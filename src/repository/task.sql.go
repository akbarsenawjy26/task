// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package repository

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "task" (description, status, created_at, updated_at)
VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING task.id, task.description, task.status, task.created_at, task.updated_at
`

type CreateTaskParams struct {
	Description string         `json:"description"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Description, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM "task"
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listTask = `-- name: ListTask :many
SELECT id, description, status, created_at, updated_at
FROM task
ORDER BY created_at DESC
`

func (q *Queries) ListTask(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskByStatus = `-- name: ListTaskByStatus :many
SELECT id, description, status, created_at, updated_at
FROM task
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskByStatus(ctx context.Context, status sql.NullString) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTaskByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE "task"
SET description = $1, status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id
`

type UpdateTaskParams struct {
	Description string         `json:"description"`
	Status      sql.NullString `json:"status"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.Description, arg.Status, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
